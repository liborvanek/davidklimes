/* eslint-disable no-restricted-globals */
import {
	files, routes, shell, timestamp, // eslint-disable-line no-unused-vars
} from "@sapper/service-worker"; // eslint-disable-line import/no-unresolved

const ASSETS = `cache${timestamp}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const toCache = shell.concat(files);
const cached = new Set(toCache);

self.addEventListener("install", (event) => { // eslint-disable-line no-shadow,no-inline-comments,line-comment-position
	event.waitUntil(
		caches
			.open(ASSETS)
			.then((cache) => cache.addAll(toCache))
			.then(() => {
				self.skipWaiting();
			}),
	);
});

self.addEventListener("activate", (event) => { // eslint-disable-line no-shadow,no-inline-comments,line-comment-position
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// Delete old caches
			for (const key of keys) { // eslint-disable-line no-restricted-syntax
				if (key !== ASSETS) await caches.delete(key); // eslint-disable-line no-await-in-loop
			}

			self.clients.claim();
		}),
	);
});

self.addEventListener("fetch", (event) => { // eslint-disable-line no-shadow,no-inline-comments,line-comment-position
	if (event.request.method !== "GET" || event.request.headers.has("range")) return;

	const url = new URL(event.request.url);

	// Don't try to handle e.g. data: URIs
	if (!url.protocol.startsWith("http")) return;

	// Ignore dev server requests
	if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

	// Always serve static files and bundler-generated assets from cache
	if (url.host === self.location.host && cached.has(url.pathname)) {
		event.respondWith(caches.match(event.request));
		return;
	}

	// For pages, you might want to serve a shell `service-worker-index.html` file,
	// Which Sapper has generated for you. It's not right for every
	// App, but if it's right for yours then uncomment this section
	/*
	If (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
		event.respondWith(caches.match('/service-worker-index.html'));
		return;
	}
	*/

	if (event.request.cache === "only-if-cached") return;

	// For everything else, try the network first, falling back to
	// Cache if the user is offline. (If the pages never change, you
	// Might prefer a cache-first approach to a network-first one.)
	event.respondWith(
		caches
			.open(`offline${timestamp}`)
			.then(async (cache) => {
				try {
					const response = await fetch(event.request);
					cache.put(event.request, response.clone());
					return response;
				} catch (err) {
					const response = await cache.match(event.request);
					if (response) return response;

					throw err;
				}
			}),
	);
});
